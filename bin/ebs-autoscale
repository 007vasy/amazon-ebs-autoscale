#!/bin/sh
# Copyright 2018 Amazon.com, Inc. or its affiliates.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice,
#  this list of conditions and the following disclaimer.
#
#  2. Redistributions in binary form must reproduce the above copyright
#  notice, this list of conditions and the following disclaimer in the
#  documentation and/or other materials provided with the distribution.
#
#  3. Neither the name of the copyright holder nor the names of its
#  contributors may be used to endorse or promote products derived from
#  this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
#  BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
#  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
#  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
#  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.

if [ "$#" -ne "1" ]; then
  echo "USAGE: $0 <MOUNT POINT>"
  exit 1
fi

logthis () {
  echo "[`date`] $1"
}

MAX_LOGICAL_VOLUME_SIZE=16384
MAX_EBS_VOLUME_COUNT=16

MOUNTPOINT=$1
BASEDIR=$(dirname $0)
logthis "EBS Autoscaling mountpoint: ${MOUNTPOINT}"

AZ=$(curl -s  http://169.254.169.254/latest/meta-data/placement/availability-zone/)
while [ -z "${AZ}" ]; do
  logthis "Metadata service did not return AZ. Trying again."
  sleep 1
  AZ=$(curl -s  http://169.254.169.254/latest/meta-data/placement/availability-zone/)
done
AWS_REGION=$(echo ${AZ} | sed -e 's/[a-z]$//')
logthis "Region = $AWS_REGION."

# IN=$(curl -s  http://169.254.169.254/latest/meta-data/instance-id)  # not used
# DRIVE_LETTERS=({a..z})  # not used

# make sure that this device is mounted.
until [ -d "${MOUNTPOINT}" ]; do
  sleep 1
done

get_num_devices() {
  echo $(ls /dev/sd* | grep -v -E '[0-9]$' | wc -l)
}

calc_threshold() {
  # calculates percent utilization threshold for adding additional ebs volumes
  # as more ebs volumes are added, the threshold level increases

  local num_devices=$(get_num_devices)
  local threshold=50

  if [ "$num_devices" -ge "4" ] && [ "$num_devices" -le "6" ]; then
    threshold=80
  elif [ "$num_devices" -gt "6" ] && [ "$num_devices" -le "10" ]; then
    threshold=90
  else
    threshold=50
  fi

  echo ${threshold}
}

calc_new_size() {
  # calculates the size to use for new ebs volumes to expand space
  # new volume sizes increase as the number of attached volumes increase
  
  local num_devices=$(get_num_devices)
  local new_size=150

  if [ "$num_devices" -ge "4" ] && [ "$num_devices" -le "6" ]; then
    new_size=300
  elif [ "$num_devices" -gt "6" ] && [ "$num_devices" -le "10" ]; then
    new_size=1000
  elif [ "$num_devices" -gt "10" ]; then
    new_size=1500
  else
    new_size=150
  fi

  echo ${new_size}
}

add_space () {
  local num_devices=$(get_num_devices)
  if [ "${num_devices}" -ge "$MAX_EBS_VOLUME_COUNT" ]; then
    logthis "No more volumes can be safely added."
    return 0
  fi

  local curr_size=$(df -BG ${MOUNTPOINT} | grep ${MOUNTPOINT} | awk '{print $2} ' | cut -d'G' -f1)
  if [ "${curr_size}" -lt "$MAX_LOGICAL_VOLUME_SIZE" ]; then
    local vol_size=$(calc_new_size)
    logthis "Extending logical volume ${MOUNTPOINT} by ${vol_size}GB"

    DEVICE=$(python ${BASEDIR}/create-ebs-volume.py -s ${vol_size})

    exit_status=$?
    if [ $exit_status -eq 0 ]; then
      logthis "adding volume to filesystem"
      btrfs device add ${DEVICE} ${MOUNTPOINT}
      btrfs balance start -m ${MOUNTPOINT}
      logthis "Finished extending device."

    else
      logthis "Error creating or attaching volume"
    fi

  fi
}

# number of event loops between utilization status log lines
# helps to limit the log file size
# utilization detection is not affected by this
LOG_INTERVAL=300

# initialized value for log lines
# report on first run
LOG_COUNT=$LOG_INTERVAL

# time in seconds between event loops
# keep this low so that rapid increases in utilization are detected
DETECTION_INTERVAL=1

THRESHOLD=$(calc_threshold)
while true; do
  PCT_UTILIZATION=$(df -BG  ${MOUNTPOINT} | grep -v Filesystem | awk '{print $5}' | cut -d"%" -f1 -)
  if  [ $PCT_UTILIZATION -ge "${THRESHOLD}" ]; then
    logthis "LOW DISK (${PCT_UTILIZATION}%): Adding more."
    add_space
  fi
  if [ "${LOG_COUNT}" -ge "${LOG_INTERVAL}" ]; then
    logthis "Threshold -> ${THRESHOLD}% :: Used% -> ${PCT_UTILIZATION}%"
    LOG_COUNT=0
  fi
  THRESHOLD=$(calc_threshold)
  LOG_COUNT=$(expr $LOG_COUNT + 1 )
  sleep $DETECTION_INTERVAL
done
